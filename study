1. input() 보다 sys.stdin.readline() 이 더 빠르다.

2. n개를 입력받아 리스트 형태로 -> [sys.stdin.readline().strip() for i in range(n)]
   strip() 은 문자열 맨 앞과 맨 뒤의 공백 문자를 제거한다.

3. 데이터의 개수를 셀 때 -> from collections import Counter
   Counter('hello world') # Counter({'l': 3, 'o': 2, 'h': 1, 'e': 1, ' ': 1, 'w': 1, 'r': 1, 'd': 1})

   most_common() -> 개수가 많은 순으로 정렬
   Counter('hello world').most_common() # [('l', 3), ('o', 2), ('h', 1), ('e', 1), (' ', 1), ('w', 1), ('r', 1), ('d', 1)]

   가장 개수가 많은 순서로 1개 출력
   Counter('hello world').most_common(1) # [('l', 3)]

4. sort vs sorted
   sort 는 그 자리에서 정렬하여 목록 변경 : a.sort()
   sorted 는 새로운 정렬된 목록 반환, 원래 목록 영향 안받음 : sorted(a)
   -> sort 는 복사본을 만들지 않기 때문에 sorted 보다 빠름
   -> list 는 sort 많이 사용
   -> 다른 이터레이터는 어차피 sorted 만 사용가능

5. list 로 stack, queue
   stack : stack.append(x), stack.pop() -> 오른쪽에서 넣고, 오른쪽에서 출력
   queue : from collections import deque 사용 --> 왼쪽에서 넣고 오른쪽에서 출력
           queue.appendleft(x) -> 왼쪽에서 입력
           queue.append(x) -> 오른쪽에서 입력
           queue.pop() -> 오른쪽에서 출력
           queue.popleft() -> 왼쪽에서 출력

6. ord('a') -> 97
   chr(97) -> a

7. strip([chars]) : 문자를 String의 왼쪽과 오른쪽에서 제거
   lstrip([chars]) : 문자를 String의 왼쪽에서 제거
   rstrip([chars]) : 문자를 String의 오른쪽에서 제거

   text = ' abc '
   print('[' + text.rstrip() + ']') # [ abc]
   print('[' + text.lstrip() + ']') # [abc ]
   print('[' + text.strip() + ']') # [abc]

8. isupper() -> 대문자 검사
   islower() -> 소문자 검사
   isdigit() -> 숫자 검사
   isspace() -> 공백 검사

9. list 길이가 0인지 아닌지 판별할때 len(list) 안하고
   if list 하면 됨

10. list 를 문자열 처럼 출력할때 -> ''.join(list)

11. 최대공약수, 최소공배수
    최대공약수 : a % b = r
              b % r = r2
              r % r2 = r3 ... -> r3 가 0 일때의 r2 값이 최대공약수
    최소공배수 : a * b // gcd(a, b)
    # 최대 공약수
    def gcd(x, y):
    while y:
        x, y = y, x % y
    return x
    # 최소 공배
    def lcm(x, y):
        return (x*y) // gcd(x, y)

12. 파이썬 진법 변환 내장함수
    2진수 : bin()
    8진수 : oct()
    16진수 : hex()
    int(n, a) -> a 진법의 n
    ex) oct(int(100,2)) -> 2진법으로 표현된 100 을 8진수로 변환해라

13. n이 소수인지 아닌지 판별할때 2부터 n의 제곱근까지만 나눠보면 됨

14. sys.setrecursionlimit(10000)

15. set 자료형 -> {} 로 나타냄
    i = {1,2,3,4,5}
    j = {3,5,7,9}
    print(i|j) # {1, 2, 3, 4, 5, 7, 9}
    print(i.union(j)) # {1, 2, 3, 4, 5, 7, 9}
    print(i&j) # {3, 5}
    print(i.intersection(j)) # {3, 5}
    print(i-j) # {1, 2, 4}
    print(i.difference(j)) # {1, 2, 4}
    print(i^j) # {1, 2, 4, 7, 9}
    print(i.symmetric_difference(j)) # {1, 2, 4, 7, 9}

16. from itertools import permutations
